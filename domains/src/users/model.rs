//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use axum_login::AuthUser;
use chrono::Utc;
use oso::PolarClass;
use sea_orm::{entity::prelude::*, Set};
use serde::{Deserialize, Serialize};
use uuid::Uuid;

use crate::role_grants::model::{self as role_grant_model, RoleGrant};

/// Authorization rules
pub const AUTHORIZATION: &str = include_str!("authorization.polar");

#[derive(
    Clone,
    Debug,
    Eq,
    PartialEq,
    DeriveEntityModel,
    Deserialize,
    Serialize,
    PolarClass,
)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    #[polar(attribute)]
    pub id: Uuid,

    /// The date the User was created
    pub created_at: DateTime,

    /// The date the User was last updated
    pub updated_at: DateTime,

    
    #[polar(attribute)]
    pub username: String,
    pub password: Option<String>,
    pub access_token: Option<String>,

    /// Related RoleGrants
    #[sea_orm(ignore)]
    #[polar(attribute)]
    pub roles: Vec<RoleGrant>,
}

pub type User = Model;

/// User entity relationships
#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "role_grant_model::Entity")]
    RoleGrant,
}

impl Related<role_grant_model::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RoleGrant.def()
    }
}

impl ActiveModelBehavior for ActiveModel {
    fn new() -> Self {
        Self {
            id: Set(Uuid::new_v4()),
            ..ActiveModelTrait::default()
        }
    }
}

impl Default for Model {
    fn default() -> Self {
        Self {
            id: Uuid::default(),
            created_at: Utc::now().naive_utc(),
            updated_at: Utc::now().naive_utc(),
            username: String::default(),
            roles: Vec::default(),
            password: Some(String::default()),
            access_token: Some(String::default()),
        }
    }
}

impl AuthUser for Model {
    type Id = Uuid;

    fn id(&self) -> Self::Id {
        self.id
    }

    fn session_auth_hash(&self) -> &[u8] {
        if let Some(access_token) = &self.access_token {
            return access_token.as_bytes();
        }

        if let Some(password) = &self.password {
            return password.as_bytes();
        }

        &[]
    }
}

/// A wrapper around `Option<User>` to enable the trait implementations below
pub struct UserOption(pub Option<User>);

impl From<Option<Model>> for UserOption {
    fn from(data: Option<Model>) -> UserOption {
        UserOption(data)
    }
}

impl From<Option<(Model, Vec<RoleGrant>)>> for UserOption {
    fn from(data: Option<(Model, Vec<RoleGrant>)>) -> UserOption {
        UserOption(data.map(|(user, roles)| User { roles, ..user }))
    }
}

impl From<UserOption> for Option<User> {
    fn from(user: UserOption) -> Option<User> {
        user.0
    }
}